{"version":3,"sources":["utils/fetchClient.ts","types/ErrorType.ts","components/GeneralContext.tsx","api/users.ts","api/comments.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","components/MainContent.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","post","ErrorType","State","users","selectedUser","setSelectedUser","isPostsLoading","setIsPostsLoading","isCommentsLoading","setIsCommentsLoading","posts","setPosts","error","none","setError","selectedPost","setSelectedPost","comments","setComments","isFormOpen","setIsFormOpen","GlobalContext","React","createContext","GlobalProvider","_ref","children","setUsers","useState","useEffect","value","_jsx","Provider","PostsList","useContext","handleSetSelectedPost","postId","id","concat","catch","err","commentsLoadingError","finally","_jsxs","className","map","title","type","onClick","classNames","Loader","NewCommentForm","newName","setNewName","newEmail","setNewEmail","newMessage","setNewMessage","isFormSending","setIsFormSending","isNameValid","setIsNameValid","isEmailValid","setIsEmailValid","isMessageValid","setIsMessageValid","onSubmit","e","preventDefault","isFormValid","formValidate","trim","name","email","commentsService","newComment","htmlFor","onChange","event","target","placeholder","clearForm","PostDetails","handleDeleteComment","commentId","filter","comment","_Fragment","href","UserSelector","isDropdownOpen","setIsDropdownOpen","handleSetUser","user","userId","postsLoadingError","toggleDropdown","role","MainContent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1604a56.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  none,\n  postsLoadingError,\n  commentsLoadingError,\n  deleteCommentError,\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../api/users';\nimport { User } from '../types/User';\nimport { Context } from '../types/Context';\nimport { Post } from '../types/Post';\nimport { ErrorType } from '../types/ErrorType';\nimport { Comment } from '../types/Comment';\n\nconst State: Context = {\n  users: [],\n  selectedUser: null,\n  setSelectedUser: () => {},\n  isPostsLoading: false,\n  setIsPostsLoading: () => {},\n  isCommentsLoading: false,\n  setIsCommentsLoading: () => {},\n  posts: [],\n  setPosts: () => {},\n  error: ErrorType.none,\n  setError: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  comments: [],\n  setComments: () => {},\n  isFormOpen: false,\n  setIsFormOpen: () => {},\n};\n\nexport const GlobalContext = React.createContext<Context>(State);\n\ntype Props = {\n  children: React.ReactNode\n};\n\nexport const GlobalProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [error, setError] = useState(ErrorType.none);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  useEffect(() => {\n    getUser().then(setUsers);\n  }, []);\n\n  const value = {\n    users,\n    selectedUser,\n    setSelectedUser,\n    isPostsLoading,\n    setIsPostsLoading,\n    isCommentsLoading,\n    setIsCommentsLoading,\n    posts,\n    setPosts,\n    error,\n    setError,\n    selectedPost,\n    setSelectedPost,\n    comments,\n    setComments,\n    isFormOpen,\n    setIsFormOpen,\n  };\n\n  return (\n    <GlobalContext.Provider value={value}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUser = () => {\n  return client.get<User[]>('/users');\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { GlobalContext } from './GeneralContext';\nimport { Post } from '../types/Post';\nimport * as commentsService from '../api/comments';\nimport { ErrorType } from '../types/ErrorType';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts,\n    selectedPost,\n    setSelectedPost,\n    setComments,\n    setError,\n    setIsCommentsLoading,\n    setIsFormOpen,\n  } = useContext(GlobalContext);\n\n  const handleSetSelectedPost = (post: Post) => {\n    setError(ErrorType.none);\n    setIsFormOpen(false);\n\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n      setComments([]);\n    } else {\n      setIsCommentsLoading(true);\n      setSelectedPost(post);\n      commentsService.getComments(post.id).then(setComments)\n        .catch((err) => {\n          setError(ErrorType.commentsLoadingError);\n          throw err;\n        })\n        .finally(() => setIsCommentsLoading(false));\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  onClick={() => handleSetSelectedPost(post)}\n                  className={classNames(\n                    'button', 'is-link', {\n                      'is-light': selectedPost?.id !== post.id,\n                    },\n                  )}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useContext } from 'react';\nimport classNames from 'classnames';\nimport { GlobalContext } from './GeneralContext';\nimport * as commentsService from '../api/comments';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    comments,\n    selectedPost,\n    setComments,\n  } = useContext(GlobalContext);\n\n  const [newName, setNewName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [newMessage, setNewMessage] = useState('');\n\n  const [isFormSending, setIsFormSending] = useState(false);\n\n  const [isNameValid, setIsNameValid] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [isMessageValid, setIsMessageValid] = useState(true);\n\n  const handleSetNewName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewName(event.target.value);\n    setIsNameValid(true);\n  };\n\n  const handleSetNewEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewEmail(event.target.value);\n    setIsEmailValid(true);\n  };\n\n  const handleSetNewMessage\n  = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setNewMessage(event.target.value);\n    setIsMessageValid(true);\n  };\n\n  const formValidate = () => {\n    let isFormValid = true;\n\n    if (newName.trim() === '') {\n      setIsNameValid(false);\n      isFormValid = false;\n    }\n\n    if (newEmail.trim() === '') {\n      setIsEmailValid(false);\n      isFormValid = false;\n    }\n\n    if (newMessage.trim() === '') {\n      setIsMessageValid(false);\n      isFormValid = false;\n    }\n\n    return isFormValid;\n  };\n\n  const handleCreateComment = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsFormSending(true);\n\n    const isFormValid = formValidate();\n\n    if (selectedPost && isFormValid) {\n      commentsService.createComment({\n        postId: selectedPost.id,\n        name: newName,\n        email: newEmail,\n        body: newMessage,\n      })\n        .catch((err) => {\n          throw err;\n        })\n        .then((newComment) => {\n          setComments([...comments, newComment]);\n        })\n        .finally(() => {\n          setNewMessage('');\n          setIsFormSending(false);\n        });\n    } else {\n      setIsFormSending(false);\n    }\n  };\n\n  const clearForm = () => {\n    setNewName('');\n    setNewEmail('');\n    setNewMessage('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleCreateComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={newName}\n            onChange={handleSetNewName}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input', {\n                'is-danger': !isNameValid,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!isNameValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isNameValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={newEmail}\n            onChange={handleSetNewEmail}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input', {\n                'is-danger': !isEmailValid,\n              },\n            )}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!isEmailValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {!isEmailValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={newMessage}\n            onChange={handleSetNewMessage}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea', {\n                'is-danger': !isMessageValid,\n              },\n            )}\n          />\n        </div>\n\n        {!isMessageValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button', 'is-link', {\n                'is-loading': isFormSending,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            onClick={clearForm}\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { GlobalContext } from './GeneralContext';\nimport { ErrorType } from '../types/ErrorType';\nimport * as commentsService from '../api/comments';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    isCommentsLoading,\n    error,\n    comments,\n    setComments,\n    isFormOpen,\n    setIsFormOpen,\n  } = useContext(GlobalContext);\n\n  const handleDeleteComment = (commentId: number) => {\n    commentsService.deleteComment(commentId)\n      .catch((err) => {\n        throw err;\n      })\n      .finally(() => {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {error === ErrorType.commentsLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {selectedPost\n          && !isCommentsLoading\n          && error === ErrorType.none\n          && (comments.length > 0\n            ? (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <article\n                    key={comment.id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            )\n            : (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n          )}\n\n          {!isFormOpen && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormOpen && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { GlobalContext } from './GeneralContext';\nimport { User } from '../types/User';\nimport { getPosts } from '../api/posts';\nimport { ErrorType } from '../types/ErrorType';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n    setIsPostsLoading,\n    setPosts,\n    setError,\n    setSelectedPost,\n  } = useContext(GlobalContext);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const toggleDropdown = () => {\n    return isDropdownOpen\n      ? setIsDropdownOpen(false)\n      : setIsDropdownOpen(true);\n  };\n\n  const handleSetUser = (user: User) => {\n    setError(ErrorType.none);\n    setSelectedPost(null);\n    setIsPostsLoading(true);\n    setSelectedUser(user);\n    setIsDropdownOpen(false);\n    getPosts(user.id).then(setPosts)\n      .catch((err) => {\n        setError(ErrorType.postsLoadingError);\n        throw err;\n      })\n      .finally(() => setIsPostsLoading(false));\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown', {\n          'is-active': isDropdownOpen,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n        >\n          <span>{!selectedUser ? 'Choose a user' : selectedUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                },\n              )}\n              onClick={() => handleSetUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { GlobalContext } from './GeneralContext';\nimport { PostsList } from './PostsList';\nimport { PostDetails } from './PostDetails';\nimport { UserSelector } from './UserSelector';\nimport { Loader } from './Loader';\nimport { ErrorType } from '../types/ErrorType';\n\nexport const MainContent: React.FC = () => {\n  const {\n    selectedUser,\n    isPostsLoading,\n    posts,\n    error,\n    selectedPost,\n  } = useContext(GlobalContext);\n\n  return (\n    <div className=\"tile is-ancestor\">\n      <div className=\"tile is-parent\">\n        <div className=\"tile is-child box is-success\">\n          <div className=\"block\">\n            <UserSelector />\n          </div>\n\n          <div className=\"block\" data-cy=\"MainContent\">\n            {!selectedUser && (\n              <p data-cy=\"NoSelectedUser\">\n                No user selected\n              </p>\n            )}\n\n            {isPostsLoading && <Loader />}\n\n            {error === ErrorType.postsLoadingError && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"PostsLoadingError\"\n              >\n                Something went wrong!\n              </div>\n            )}\n\n            {selectedUser\n            && !isPostsLoading\n            && error === ErrorType.none\n            && (posts.length > 0\n              ? <PostsList />\n              : (\n                <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                  No posts yet\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n\n      <div\n        data-cy=\"Sidebar\"\n        className={classNames(\n          'tile',\n          'is-parent',\n          'is-8-desktop',\n          'Sidebar', {\n            'Sidebar--open': selectedPost,\n          },\n        )}\n      >\n        <div className=\"tile is-child box is-success \">\n          <PostDetails />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { GlobalProvider } from './components/GeneralContext';\nimport { MainContent } from './components/MainContent';\n\nexport const App: React.FC = () => (\n  <GlobalProvider>\n    <main className=\"section\">\n      <div className=\"container\">\n        <MainContent />\n      </div>\n    </main>\n  </GlobalProvider>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}